#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
TODO
'''

import sys
import csv
import argparse

import numpy as np

def load_stars(stream):
    '''
    Generator that yields stars in stream as a dictionary.
    '''
    # Collect fieldnames for DictReader.
    reader = csv.reader(stream)
    fieldnames = next(reader)
    # Skip Sol, since we want k-nearest neighbors to Sol.
    # next(reader)
    # Parse stars one at a time.
    for star in csv.DictReader(stream, fieldnames=fieldnames):
        yield star

def compute_euclidian_distance(q, p):
    '''
    Compute distance between points p and q in Euclidean
    space, represented as n-dimensional Euclidean vectors.

    Use numpy array for performance and clarity.
    '''
    q = np.array(q)
    p = np.array(p)
    return np.sqrt(np.sum((q - p) ** 2))

# TODO: rename
def find_distances_from_point(point, stars):
    for star in stars:
        star_coordinates = [float(coord) for coord in (star['x'], star['y'], star['z'])]
        yield compute_euclidian_distance(sol, star_coordinates)

if __name__ == '__main__':

    with sys.stdin as stream:
        k = 5
        sol = (0.0, 0.0, 0.0)
        stars = load_stars(stream)
        for star in stars:
            print(star['id'])
            star_coordinates = [float(coord) for coord in (star['x'], star['y'], star['z'])]
            print(compute_euclidian_distance(sol, star_coordinates))
            print(star['dist'])

        k_nearest_stars = sorted(find_distances_from_point(sol, stars))[:k]
        print('The {} nearest stars to {} are:'.format(k, sol))
        print(k_nearest_stars)
